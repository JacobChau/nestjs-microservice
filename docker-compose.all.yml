version: '3'
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.2
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - kafka-net

  kafka:
    image: confluentinc/cp-kafka:7.3.2
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    networks:
      - kafka-net

  init-kafka:
    image: confluentinc/cp-kafka:7.3.2
    depends_on:
      - kafka
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      "
      # blocks until kafka is reachable
      kafka-topics --bootstrap-server kafka:29092 --list

      echo -e 'Creating kafka topics for ticket booking system'
      
      # Event Topics
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic event.created --replication-factor 1 --partitions 1
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic event.updated --replication-factor 1 --partitions 1
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic seat.reserved --replication-factor 1 --partitions 1
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic seat.released --replication-factor 1 --partitions 1
      
      # Booking Topics
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic booking.requested --replication-factor 1 --partitions 1
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic booking.confirmed --replication-factor 1 --partitions 1
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic booking.cancelled --replication-factor 1 --partitions 1
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic booking.failed --replication-factor 1 --partitions 1
      
      # User Topics
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic user.registered --replication-factor 1 --partitions 1
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic user.authenticated --replication-factor 1 --partitions 1
      
      # Payment Topics
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic payment.requested --replication-factor 1 --partitions 1
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic payment.completed --replication-factor 1 --partitions 1
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic payment.failed --replication-factor 1 --partitions 1

      echo -e 'Successfully created the following topics:'
      kafka-topics --bootstrap-server kafka:29092 --list
      "
    networks:
      - kafka-net

  # PostgreSQL for Auth & Booking Services (Optimized for ACID transactions)
  postgres-db:
    image: postgres:14
    container_name: postgres-db
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init-scripts/init-databases.sql:/docker-entrypoint-initdb.d/01-init-databases.sql
    networks:
      - kafka-net

  # MongoDB for Event Service (Optimized for flexible schema and read-heavy operations)
  mongo-db:
    image: mongo:5
    container_name: mongo-db
    environment:
      MONGO_INITDB_ROOT_USERNAME: mongo
      MONGO_INITDB_ROOT_PASSWORD: mongo
      MONGO_INITDB_DATABASE: events_demo
    ports:
      - "27017:27017"
    volumes:
      - mongo-data:/data/db
      - ./init-scripts/seed-data.js:/docker-entrypoint-initdb.d/seed-data.js
    networks:
      - kafka-net

  # NestJS Services
  api-gateway:
    build:
      context: .
      dockerfile: Dockerfile.api-gateway
    container_name: api-gateway
    ports:
      - "3000:3000"
    depends_on:
      - kafka
      - auth-service
      - event-service
      - booking-service
    environment:
      - NODE_ENV=production
    networks:
      - kafka-net

  auth-service:
    build:
      context: .
      dockerfile: Dockerfile.auth-service
    container_name: auth-service
    depends_on:
      - kafka
      - postgres-db
    environment:
      - NODE_ENV=production
    networks:
      - kafka-net

  event-service:
    build:
      context: .
      dockerfile: Dockerfile.event-service
    container_name: event-service
    depends_on:
      - kafka
      - mongo-db
    environment:
      - NODE_ENV=production
    networks:
      - kafka-net

  booking-service:
    build:
      context: .
      dockerfile: Dockerfile.booking-service
    container_name: booking-service
    depends_on:
      - kafka
      - postgres-db
    environment:
      - NODE_ENV=production
    networks:
      - kafka-net

networks:
  kafka-net:
    driver: bridge

volumes:
  postgres-data:
  mongo-data: 