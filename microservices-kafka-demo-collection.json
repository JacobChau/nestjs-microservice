{
  "info": {
    "name": "Microservices + Kafka Seminar Demo - 4 Core Scenarios",
    "description": "Focused collection demonstrating how microservices + Kafka solve real booking problems. Based on SEMINAR_DEMO_GUIDE.md",
    "version": "2.0.0",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:3000",
      "type": "string"
    },
    {
      "key": "eventId",
      "value": "",
      "type": "string"
    },
    {
      "key": "user1Token",
      "value": "",
      "type": "string"
    },
    {
      "key": "user2Token", 
      "value": "",
      "type": "string"
    },
    {
      "key": "user3Token",
      "value": "",
      "type": "string"
    },
    {
      "key": "booking1Id",
      "value": "",
      "type": "string"
    },
    {
      "key": "booking2Id",
      "value": "",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "üèóÔ∏è Setup: 3-User Authentication",
      "description": "Quick setup for 3 demo users and event",
      "item": [
        {
          "name": "Get Demo Event",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    if (response.success && response.data && response.data.length > 0) {",
                  "        pm.collectionVariables.set('eventId', response.data[0].id);",
                  "        console.log('‚úÖ Using event:', response.data[0].name);",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/events",
              "host": ["{{baseUrl}}"],
              "path": ["events"]
            }
          }
        },
        {
          "name": "Login Alice (User 1)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    if (response.success && response.data.token) {",
                  "        pm.collectionVariables.set('user1Token', response.data.token);",
                  "        console.log('‚úÖ Alice ready for demo');",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"alice@demo.com\",\n  \"password\": \"demo123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "login"]
            }
          }
        },
        {
          "name": "Login Bob (User 2)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    if (response.success && response.data.token) {",
                  "        pm.collectionVariables.set('user2Token', response.data.token);",
                  "        console.log('‚úÖ Bob ready for demo');",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"bob@demo.com\",\n  \"password\": \"demo123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "login"]
            }
          }
        },
        {
          "name": "Login Charlie (User 3)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    if (response.success && response.data.token) {",
                  "        pm.collectionVariables.set('user3Token', response.data.token);",
                  "        console.log('‚úÖ Charlie ready for demo');",
                  "        console.log('üéØ All 3 users ready! Start the 4 demo scenarios.');",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"charlie@demo.com\",\n  \"password\": \"demo123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "login"]
            }
          }
        }
      ]
    },
    {
      "name": "üöÄ Demo 1: Concurrent Booking Conflict (5 min)",
      "description": "The classic race condition: 3 users click same seat simultaneously",
      "item": [
        {
          "name": "Alice Books Seat A1 ü•á",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "console.log('üé™ DEMO 1: CONCURRENT BOOKING CONFLICT');",
                  "console.log('=====================================');",
                  "console.log('üéØ SCENARIO: 3 users click seat A1 at exactly the same time');",
                  "console.log('‚ùì QUESTION: What happens? Who gets the seat?');",
                  "console.log('');",
                  "",
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    if (response.success && response.data.id) {",
                  "        pm.collectionVariables.set('booking1Id', response.data.id);",
                  "        console.log('üéâ ALICE WINS! Got seat A1');",
                  "        console.log('‚ö° HOW? Kafka message ordering = first-come-first-served');",
                  "        console.log('üîê HOW? Redis atomic operations = no race conditions');",
                  "        console.log('üìã Booking ID: ' + response.data.id);",
                  "    }",
                  "} else {",
                  "    console.log('‚ùå Alice failed - this should not happen!');",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "{{user1Token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"eventId\": \"{{eventId}}\",\n  \"seatIds\": [\"{{eventId}}_A1\"]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/bookings",
              "host": ["{{baseUrl}}"],
              "path": ["bookings"]
            },
            "description": "üéØ Click SEND simultaneously with Bob and Charlie requests"
          }
        },
        {
          "name": "Bob Tries Seat A1 ü•à",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    if (response.success) {",
                  "        console.log('üö® DOUBLE BOOKING! Bob also got seat A1!');",
                  "        console.log('üí• This would be a disaster in production!');",
                  "    } else {",
                  "        console.log('‚úÖ Bob correctly blocked: ' + response.error);",
                  "        console.log('üõ°Ô∏è KAFKA PROTECTION: Message ordering prevented double-booking');",
                  "    }",
                  "} else {",
                  "    console.log('‚úÖ Bob correctly blocked: Seat A1 already taken');",
                  "    console.log('‚ö° MICROSERVICE BENEFIT: Fast, clear error response');",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "{{user2Token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"eventId\": \"{{eventId}}\",\n  \"seatIds\": [\"{{eventId}}_A1\"]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/bookings",
              "host": ["{{baseUrl}}"],
              "path": ["bookings"]
            },
            "description": "üéØ Should fail - seat taken by Alice"
          }
        },
        {
          "name": "Charlie Tries Seat A1 ü•â",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    if (response.success) {",
                  "        console.log('üö® TRIPLE BOOKING! Charlie also got seat A1!');",
                  "    } else {",
                  "        console.log('‚úÖ Charlie correctly blocked: ' + response.error);",
                  "    }",
                  "} else {",
                  "    console.log('‚úÖ Charlie correctly blocked: Seat A1 already taken');",
                  "    console.log('');",
                  "    console.log('üéâ DEMO 1 COMPLETE: Race Condition Prevented!');",
                  "    console.log('===============================================');",
                  "    console.log('‚úÖ Result: Only Alice got the seat (fair!)');",
                  "    console.log('‚ö° Kafka: Ensured message ordering');",
                  "    console.log('üîê Redis: Atomic seat locking');",
                  "    console.log('üèóÔ∏è Microservices: Handled concurrent load');",
                  "    console.log('');",
                  "    console.log('üí° Real-world impact: This is how Ticketmaster prevents chaos!');",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "{{user3Token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"eventId\": \"{{eventId}}\",\n  \"seatIds\": [\"{{eventId}}_A1\"]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/bookings",
              "host": ["{{baseUrl}}"],
              "path": ["bookings"]
            },
            "description": "üéØ Should also fail - demonstrates complete protection"
          }
        }
      ]
    },
    {
      "name": "‚è∞ Demo 2: Booking Timeout & Recovery (5 min)",
      "description": "What happens when users abandon their booking?",
      "item": [
        {
          "name": "Bob Reserves Seat A2",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "console.log('‚è∞ DEMO 2: BOOKING TIMEOUT & RECOVERY');",
                  "console.log('====================================');",
                  "console.log('üéØ SCENARIO: User reserves seat but disappears without paying');",
                  "console.log('‚ùì PROBLEM: Should seat be locked forever?');",
                  "console.log('');",
                  "",
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    if (response.success && response.data.id) {",
                  "        pm.collectionVariables.set('booking2Id', response.data.id);",
                  "        console.log('‚úÖ Bob reserved seat A2 (status: pending)');",
                  "        console.log('‚è∞ Seat is temporarily held for payment');",
                  "        console.log('üìã Booking ID: ' + response.data.id);",
                  "        console.log('');",
                  "        console.log('üéØ Next: Check seat status, then simulate timeout...');",
                  "    }",
                  "} else {",
                  "    console.log('‚ùå Bob failed to reserve seat A2');",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "{{user2Token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"eventId\": \"{{eventId}}\",\n  \"seatIds\": [\"{{eventId}}_A2\"]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/bookings",
              "host": ["{{baseUrl}}"],
              "path": ["bookings"]
            },
            "description": "üéØ Bob gets seat A2 - but will he pay?"
          }
        },
        {
          "name": "Check Seat A2 Status (Reserved)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    if (response.success && response.data) {",
                  "        console.log('üìä Current seat status for the event:');",
                  "        if (Array.isArray(response.data)) {",
                  "            const seatA2 = response.data.find(seat => seat.id.endsWith('_A2'));",
                  "            if (seatA2) {",
                  "                console.log('üé´ Seat A2 status: ' + seatA2.status);",
                  "                console.log('üë§ Reserved by: Bob (temporarily)');",
                  "            }",
                  "            const available = response.data.filter(seat => seat.status === 'available').length;",
                  "            const reserved = response.data.filter(seat => seat.status === 'reserved').length;",
                  "            console.log('üìà Total: ' + available + ' available, ' + reserved + ' reserved');",
                  "        }",
                  "        console.log('');",
                  "        console.log('‚è∞ In real system: 10 minute timeout');",
                  "        console.log('üéØ Demo: We will manually cancel to simulate timeout');",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/events/{{eventId}}/seats",
              "host": ["{{baseUrl}}"],
              "path": ["events", "{{eventId}}", "seats"]
            },
            "description": "üìä Verify seat A2 is reserved"
          }
        },
        {
          "name": "Simulate Timeout (Cancel Booking)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    if (response.success) {",
                  "        console.log('‚è∞ TIMEOUT SIMULATED: Booking cancelled');",
                  "        console.log('üîÑ Seat A2 should now be available again');",
                  "        console.log('‚úÖ KAFKA BENEFIT: Timeout event broadcasted to all services');",
                  "        console.log('üéØ Next: Check seat status to confirm it is available');",
                  "    }",
                  "} else {",
                  "    console.log('‚ùå Failed to cancel booking');",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "{{user2Token}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/bookings/{{booking2Id}}/cancel",
              "host": ["{{baseUrl}}"],
              "path": ["bookings", "{{booking2Id}}", "cancel"]
            },
            "description": "‚è∞ Simulate 10-minute timeout"
          }
        },
        {
          "name": "Verify Seat A2 Available Again",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    if (response.success && response.data) {",
                  "        if (Array.isArray(response.data)) {",
                  "            const seatA2 = response.data.find(seat => seat.id.endsWith('_A2'));",
                  "            if (seatA2) {",
                  "                console.log('üé´ Seat A2 status: ' + seatA2.status);",
                  "                if (seatA2.status === 'available') {",
                  "                    console.log('‚úÖ SUCCESS: Seat A2 is available again!');",
                  "                } else {",
                  "                    console.log('‚ö†Ô∏è Seat A2 still reserved - may need a moment');",
                  "                }",
                  "            }",
                  "            const available = response.data.filter(seat => seat.status === 'available').length;",
                  "            const reserved = response.data.filter(seat => seat.status === 'reserved').length;",
                  "            console.log('üìà Total: ' + available + ' available, ' + reserved + ' reserved');",
                  "        }",
                  "        console.log('');",
                  "        console.log('üéâ DEMO 2 COMPLETE: Timeout Handling Works!');",
                  "        console.log('==========================================');",
                  "        console.log('‚úÖ Abandoned reservations do not lock seats forever');",
                  "        console.log('‚ö° Kafka events notify all services of state changes');",
                  "        console.log('üîÑ Real-time updates keep availability accurate');",
                  "        console.log('üè™ Business value: No lost sales from stuck inventory!');",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/events/{{eventId}}/seats",
              "host": ["{{baseUrl}}"],
              "path": ["events", "{{eventId}}", "seats"]
            },
            "description": "üìä Confirm seat A2 is available again"
          }
        }
      ]
    },
    {
      "name": "üí≥ Demo 3: Payment Flow & State Management (5 min)",
      "description": "Complete booking lifecycle: reserve ‚Üí pay ‚Üí confirm",
      "item": [
        {
          "name": "Charlie Reserves Seat A3",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "console.log('üí≥ DEMO 3: PAYMENT FLOW & STATE MANAGEMENT');",
                  "console.log('==========================================');",
                  "console.log('üéØ SCENARIO: User goes through complete booking process');",
                  "console.log('üìã FLOW: Reserve ‚Üí Pay ‚Üí Confirm ‚Üí Permanent seat allocation');",
                  "console.log('');",
                  "",
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    if (response.success && response.data.id) {",
                  "        pm.collectionVariables.set('booking2Id', response.data.id);",
                  "        console.log('‚úÖ Charlie reserved seat A3');",
                  "        console.log('üìä Status: ' + response.data.status);",
                  "        console.log('üí∞ Amount: $' + response.data.totalAmount);",
                  "        console.log('üìã Booking ID: ' + response.data.id);",
                  "        console.log('');",
                  "        console.log('üéØ Next: Check booking details, then process payment');",
                  "    }",
                  "} else {",
                  "    console.log('‚ùå Charlie failed to reserve seat A3');",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "{{user3Token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"eventId\": \"{{eventId}}\",\n  \"seatIds\": [\"{{eventId}}_A3\"]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/bookings",
              "host": ["{{baseUrl}}"],
              "path": ["bookings"]
            },
            "description": "üéØ Charlie starts the complete booking flow"
          }
        },
        {
          "name": "Check Booking Details (Pending)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    if (response.success && response.data) {",
                  "        console.log('üìã BOOKING STATE: Pending Payment');",
                  "        console.log('================');",
                  "        console.log('ID: ' + response.data.id);",
                  "        console.log('Status: ' + response.data.status);",
                  "        console.log('Seats: ' + JSON.stringify(response.data.seatIds));",
                  "        console.log('Amount: $' + response.data.totalAmount);",
                  "        console.log('Created: ' + response.data.createdAt);",
                  "        console.log('');",
                  "        console.log('üéØ Booking is in PENDING state - ready for payment');",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{user3Token}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/bookings/{{booking2Id}}",
              "host": ["{{baseUrl}}"],
              "path": ["bookings", "{{booking2Id}}"]
            },
            "description": "üìä Show current booking state"
          }
        },
        {
          "name": "Process Payment (Confirm Booking)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    if (response.success) {",
                  "        console.log('üí≥ PAYMENT SUCCESSFUL!');",
                  "        console.log('===================');",
                  "        console.log('‚úÖ Status changed to: ' + response.status);",
                  "        console.log('üí∞ Payment ID: payment_demo_charlie_123');",
                  "        console.log('üì® KAFKA EVENT: Payment confirmation broadcasted');",
                  "        console.log('üé´ MICROSERVICE: Booking service updated state');",
                  "        console.log('üé≠ EVENT-DRIVEN: All services notified');",
                  "        console.log('');",
                  "        console.log('üéØ Next: Check final booking state and seat status');",
                  "    }",
                  "} else {",
                  "    console.log('‚ùå Payment failed');",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "{{user3Token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"paymentId\": \"payment_demo_charlie_123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/bookings/{{booking2Id}}/confirm",
              "host": ["{{baseUrl}}"],
              "path": ["bookings", "{{booking2Id}}", "confirm"]
            },
            "description": "üí≥ Complete the payment process"
          }
        },
        {
          "name": "Final State: Booking Confirmed",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    if (response.success && response.data) {",
                  "        console.log('üéâ FINAL BOOKING STATE: Confirmed');",
                  "        console.log('==================================');",
                  "        console.log('ID: ' + response.data.id);",
                  "        console.log('Status: ' + response.data.status);",
                  "        console.log('Payment ID: ' + (response.data.paymentId || 'payment_demo_charlie_123'));",
                  "        console.log('Updated: ' + response.data.updatedAt);",
                  "        console.log('');",
                  "        console.log('üéâ DEMO 3 COMPLETE: Full Payment Flow!');",
                  "        console.log('======================================');",
                  "        console.log('‚úÖ Clear state transitions: pending ‚Üí confirmed');",
                  "        console.log('üìù Complete audit trail of all changes');",
                  "        console.log('üí≥ Payment integration with booking system');",
                  "        console.log('üé´ Permanent seat allocation after payment');",
                  "        console.log('üèóÔ∏è Microservices handle complex workflows gracefully');",
                  "    }",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "{{user3Token}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/bookings/{{booking2Id}}",
              "host": ["{{baseUrl}}"],
              "path": ["bookings", "{{booking2Id}}"]
            },
            "description": "üìä Show final confirmed state"
          }
        }
      ]
    },
    {
      "name": "üîß Demo 4: Service Resilience (3 min)",
      "description": "What happens when services crash during operation?",
      "item": [
        {
          "name": "Normal Booking (Before Crash)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "console.log('üîß DEMO 4: SERVICE RESILIENCE');",
                  "console.log('=============================');",
                  "console.log('üéØ SCENARIO: Booking service crashes during peak load');",
                  "console.log('‚ùì QUESTION: Does the whole system go down?');",
                  "console.log('');",
                  "",
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    if (response.success) {",
                  "        console.log('‚úÖ Normal booking works fine');",
                  "        console.log('üéØ Next: Simulate service crash and retry booking');",
                  "    }",
                  "} else {",
                  "    console.log('‚ùå Normal booking failed - check services');",
                  "}"
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "{{user1Token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"eventId\": \"{{eventId}}\",\n  \"seatIds\": [\"{{eventId}}_A4\"]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/bookings",
              "host": ["{{baseUrl}}"],
              "path": ["bookings"]
            },
            "description": "üéØ Show normal operation before crash"
          }
        },
        {
          "name": "Booking During Service Issues",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "console.log('‚ö†Ô∏è TESTING SERVICE RESILIENCE...');",
                  "console.log('');",
                  "",
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    if (response.success) {",
                  "        console.log('‚úÖ Booking succeeded despite potential issues');",
                  "        console.log('üèóÔ∏è MICROSERVICE BENEFIT: System self-healing');",
                  "    } else {",
                  "        console.log('‚ö†Ô∏è Booking failed but system handled gracefully: ' + response.error);",
                  "        console.log('üõ°Ô∏è MICROSERVICE BENEFIT: Graceful degradation');",
                  "    }",
                  "} else if (pm.response.code >= 500) {",
                  "    console.log('‚ö†Ô∏è Service temporarily unavailable (HTTP ' + pm.response.code + ')');",
                  "    console.log('üèóÔ∏è MICROSERVICE BENEFIT: Isolated service failure');",
                  "    console.log('üîÑ KAFKA BENEFIT: Messages queued for when service recovers');",
                  "} else {",
                  "    const response = pm.response.json();",
                  "    console.log('‚ö†Ô∏è Service issue handled gracefully: ' + (response.error || 'Service unavailable'));",
                  "    console.log('üöÄ MICROSERVICE BENEFIT: Other services still working');",
                  "    console.log('üìä USER EXPERIENCE: Clear error message, no system crash');",
                  "}",
                  "",
                  "console.log('');",
                  "console.log('üéâ DEMO 4 COMPLETE: Service Resilience!');",
                  "console.log('======================================');",
                  "console.log('‚úÖ Graceful error handling when services are down');",
                  "console.log('üì® Message persistence in Kafka during outages');",
                  "console.log('üîÑ Automatic recovery when services restart');",
                  "console.log('üí™ No data loss even during failures');",
                  "console.log('üèóÔ∏è Fault isolation: One service failure ‚â† system failure');",
                  "console.log('');",
                  "console.log('üé≠ ALL 4 DEMOS COMPLETE!');",
                  "console.log('=======================');",
                  "console.log('You have successfully demonstrated:');",
                  "console.log('1. üöÄ Race condition prevention');",
                  "console.log('2. ‚è∞ Timeout handling & recovery'); ",
                  "console.log('3. üí≥ Complete payment workflows');",
                  "console.log('4. üîß Service resilience & fault tolerance');",
                  "console.log('');",
                  "console.log('üí° This is production-ready architecture used by:');",
                  "console.log('üé´ Ticketmaster (millions of concurrent users)');",
                  "console.log('üè® Airbnb (global booking platform)');",
                  "console.log('üé¨ Netflix (streaming at scale)');",
                  "console.log('üöó Uber (real-time matching)');",
                  ""
                ],
                "type": "text/javascript"
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "{{user2Token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"eventId\": \"{{eventId}}\",\n  \"seatIds\": [\"{{eventId}}_A5\"]\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/bookings",
              "host": ["{{baseUrl}}"],
              "path": ["bookings"]
            },
            "description": "üîß Test booking during service issues (run after docker-compose stop booking-service)"
          }
        }
      ]
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Auto-load environment variables if available",
          "const envVars = ['eventId', 'user1Token', 'user2Token', 'user3Token'];",
          "envVars.forEach(varName => {",
          "    const envValue = pm.environment.get(varName);",
          "    if (envValue && !pm.collectionVariables.get(varName)) {",
          "        pm.collectionVariables.set(varName, envValue);",
          "    }",
          "});"
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// Performance monitoring",
          "const responseTime = pm.response.responseTime;",
          "if (responseTime > 1000) {",
          "    console.log('‚ö†Ô∏è Slow response: ' + responseTime + 'ms (check system load)');",
          "} else if (responseTime < 100) {",
          "    console.log('‚ö° Fast response: ' + responseTime + 'ms (excellent!)');",
          "}"
        ]
      }
    }
  ]
} 